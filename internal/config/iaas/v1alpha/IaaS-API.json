{
  "components": {
    "parameters": {
      "v1DryRun": {
        "description": "Test without applying.",
        "in": "query",
        "name": "dryrun",
        "schema": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "v1KeypairName": {
        "description": "Name of key pair.",
        "example": "keypair-123",
        "in": "path",
        "name": "keypairName",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1GenericName"
        }
      },
      "v1NetworkAreaID": {
        "description": "STACKIT Network Area ID.",
        "in": "path",
        "name": "areaId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1NetworkID": {
        "description": "STACKIT Network ID.",
        "in": "path",
        "name": "networkId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1NetworkRangeID": {
        "description": "STACKIT Network Range ID.",
        "in": "path",
        "name": "networkRangeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1OpenStackProjectId": {
        "description": "OpenStack Project ID.",
        "in": "path",
        "name": "openStackProjectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1OpenStackProjectId"
        }
      },
      "v1OrganizationID": {
        "description": "STACKIT Organization ID.",
        "in": "path",
        "name": "organizationId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1ProjectID": {
        "description": "STACKIT Project ID.",
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1RequestID": {
        "description": "STACKIT Request ID.",
        "in": "path",
        "name": "requestId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1ReqID"
        }
      },
      "v1RouteID": {
        "description": "STACKI Route ID.",
        "in": "path",
        "name": "routeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1SecurityGroupID": {
        "description": "STACKIT Security Group ID.",
        "in": "path",
        "name": "securityGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1ServerGroupID": {
        "description": "STACKIT Server Group ID.",
        "in": "path",
        "name": "serverGroupId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1ServerID": {
        "description": "STACKIT Server ID.",
        "in": "path",
        "name": "serverId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      },
      "v1ServiceAccountMail": {
        "description": "ID of the service account (E-Mail address).",
        "in": "path",
        "name": "serviceAccountMail",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1ServiceAccountMail"
        }
      },
      "v1VolumeID": {
        "description": "STACKIT Volume ID.",
        "in": "path",
        "name": "volumeId",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/v1UUID"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "InvalidAffinityPolicy": {
                "value": {
                  "code": 400,
                  "msg": "The server group policy is not supported"
                }
              },
              "InvalidBootDeviceSize": {
                "value": {
                  "code": 400,
                  "msg": "boot device size is not valid or missing"
                }
              },
              "InvalidFlavor": {
                "value": {
                  "code": 400,
                  "msg": "flavor is not valid"
                }
              },
              "InvalidParameter": {
                "value": {
                  "code": 400,
                  "msg": "request body has an error: doesn't match schema: Error at \"/name\": value must be a string"
                }
              },
              "InvalidPublicKey": {
                "value": {
                  "code": 400,
                  "msg": "invalid pubkey"
                }
              },
              "InvalidUUID": {
                "value": {
                  "code": 400,
                  "msg": "invalid uuid"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Bad request."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "msg": "Forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Forbidden Request."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "code": 500,
              "msg": "internal server error"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Internal Server Error, returns a 500 if something is broken on IaaS API Side."
      },
      "InvalidServerAction": {
        "content": {
          "application/json": {
            "example": {
              "code": 409,
              "msg": "InvalidServerAction"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Invalid server action."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "AreaNotFound": {
                "value": {
                  "code": 404,
                  "msg": "area not found"
                }
              },
              "KeyPairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "KeypairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "NetworkNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network not found"
                }
              },
              "NetworkRangeNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network range not found"
                }
              },
              "OrganizationNotFound": {
                "value": {
                  "code": 404,
                  "msg": "organization not found"
                }
              },
              "ProjectNotFound": {
                "value": {
                  "code": 404,
                  "msg": "project not found"
                }
              },
              "RequestNotFound": {
                "value": {
                  "code": 404,
                  "msg": "request not found"
                }
              },
              "RouteNotFound": {
                "value": {
                  "code": 404,
                  "msg": "route not found"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Object not found."
      },
      "ServerOrPublicIPNotFound": {
        "content": {
          "application/json": {
            "example": {
              "code": 404,
              "msg": "ServerOrPublicIPNotFound"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Server or public IP not found."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "msg": "Unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Unauthorized Request."
      }
    },
    "schemas": {
      "v1AreaDefaultPrefixLength": {
        "description": "The default prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "v1AreaID": {
        "description": "Area ID.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/v1UUID"
          },
          {
            "$ref": "#/components/schemas/v1StaticAreaID"
          }
        ]
      },
      "v1AreaMaxPrefixLength": {
        "description": "The maximal prefix length for networks in the network area.",
        "example": 29,
        "maximum": 29,
        "minimum": 24,
        "type": "integer"
      },
      "v1AreaMinPrefixLength": {
        "description": "The minimal prefix length for networks in the network area.",
        "example": 24,
        "maximum": 29,
        "minimum": 22,
        "type": "integer"
      },
      "v1AvailabilityZone": {
        "description": "Availability zone.",
        "example": "eu01-1",
        "type": "string"
      },
      "v1BootDevice": {
        "description": "Boot device for the server.",
        "properties": {
          "performanceClass": {
            "$ref": "#/components/schemas/v1VolumePerformanceClass"
          },
          "size": {
            "example": 40,
            "type": "integer"
          },
          "sourceId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "sourceType": {
            "$ref": "#/components/schemas/v1BootDeviceSourceType"
          }
        },
        "required": [
          "sourceType",
          "sourceId"
        ],
        "type": "object"
      },
      "v1BootDeviceSourceType": {
        "description": "Source types for a boot device.",
        "enum": [
          "volume",
          "image"
        ],
        "example": "volume",
        "type": "string"
      },
      "v1CIDR": {
        "description": "Classless Inter-Domain Routing (CIDR).",
        "example": "10.1.2.0/24",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(3[0-2]|2[0-9]|1[0-9]|[0-9]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "v1Description": {
        "description": "Description Object. Allows string up to 127 Characters.",
        "example": "cool description dude. Wanna play some Snakeybus?",
        "maxLength": 127,
        "type": "string"
      },
      "v1Error": {
        "description": "Error with HTTP error code and an error message.",
        "properties": {
          "code": {
            "example": 404,
            "type": "integer"
          },
          "msg": {
            "example": "Project not found",
            "type": "string"
          }
        },
        "required": [
          "code",
          "msg"
        ],
        "type": "object"
      },
      "v1GenericName": {
        "description": "The name for a General Object. Matches Names and also UUIDs.",
        "example": "objectName26",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|_|\\s|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "v1Health": {
        "description": "Health probe object.",
        "properties": {
          "status": {
            "example": "available",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "v1IP": {
        "description": "An IP address.",
        "example": "10.1.2.10",
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "v1KeyPair": {
        "description": "SSH key pair.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/v1GenericName"
          },
          "publicKey": {
            "$ref": "#/components/schemas/v1SSHPublicKey"
          }
        },
        "required": [
          "publicKey"
        ],
        "type": "object"
      },
      "v1KeyPairList": {
        "description": "A list of key pairs.",
        "items": {
          "$ref": "#/components/schemas/v1KeyPair"
        },
        "type": "array"
      },
      "v1KeyPairListResponse": {
        "description": "Key pair list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1KeyPairList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1Nameserver": {
        "description": "List of DNS Servers/Nameservers.",
        "example": [
          "10.20.30.40",
          "50.60.70.80"
        ],
        "items": {
          "$ref": "#/components/schemas/v1IP"
        },
        "maxItems": 3,
        "type": "array"
      },
      "v1Network": {
        "description": "Object represents a network.",
        "properties": {
          "name": {
            "example": "My network",
            "type": "string"
          },
          "nameservers": {
            "$ref": "#/components/schemas/v1Nameserver"
          },
          "networkId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "prefixes": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/v1CIDR"
            },
            "type": "array"
          },
          "publicIp": {
            "$ref": "#/components/schemas/v1IP"
          }
        },
        "required": [
          "networkId",
          "prefixes",
          "name"
        ],
        "type": "object"
      },
      "v1NetworkArea": {
        "description": "Object represents a network area.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "defaultNameservers": {
            "$ref": "#/components/schemas/v1Nameserver"
          },
          "defaultPrefixLen": {
            "description": "The default prefixes length for prefixes allocated from this area. When not supplied in call the default for default prefix length is clamped to be between the minPrefixLen and the maxPrefixLen.",
            "example": 24,
            "type": "integer"
          },
          "maxPrefixLen": {
            "description": "The maximal allowed prefix length for prefixes allocated from this area.",
            "example": 29,
            "type": "integer"
          },
          "minPrefixLen": {
            "description": "The minimal allowed prefix length for prefixes allocated from this area.",
            "example": 24,
            "type": "integer"
          },
          "name": {
            "example": "My network area",
            "type": "string"
          },
          "networkRanges": {
            "$ref": "#/components/schemas/v1NetworkRangeList"
          },
          "projectCount": {
            "description": "The amount of projects currently referencing this area.",
            "example": 10,
            "minimum": 0,
            "type": "integer"
          },
          "routes": {
            "$ref": "#/components/schemas/v1RouteList"
          },
          "state": {
            "$ref": "#/components/schemas/v1ResourceState"
          },
          "transferNetwork": {
            "$ref": "#/components/schemas/v1CIDR"
          }
        },
        "required": [
          "areaId",
          "transferNetwork",
          "name",
          "networkRanges",
          "projectCount",
          "routes",
          "state"
        ],
        "type": "object"
      },
      "v1NetworkAreaList": {
        "description": "A list of Network areas.",
        "items": {
          "$ref": "#/components/schemas/v1NetworkArea"
        },
        "type": "array"
      },
      "v1NetworkAreaListResponse": {
        "description": "Network area list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1NetworkAreaList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1NetworkList": {
        "description": "List of Networks.",
        "items": {
          "$ref": "#/components/schemas/v1Network"
        },
        "type": "array"
      },
      "v1NetworkListResponse": {
        "description": "Network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1NetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1NetworkRange": {
        "description": "Object representate a network range.",
        "properties": {
          "networkRangeId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "prefix": {
            "$ref": "#/components/schemas/v1CIDR"
          }
        },
        "required": [
          "networkRangeId",
          "prefix"
        ],
        "type": "object"
      },
      "v1NetworkRangeList": {
        "description": "A list of Network ranges.",
        "items": {
          "$ref": "#/components/schemas/v1NetworkRange"
        },
        "type": "array"
      },
      "v1NetworkRangeListResponse": {
        "description": "Network Range list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1NetworkRangeList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1OpenStackNetwork": {
        "description": "Representation of an OpenStack network.",
        "properties": {
          "cidr": {
            "$ref": "#/components/schemas/v1CIDR"
          },
          "openstackNetworkID": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "openstackRouterID": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "openstackSubnetID": {
            "$ref": "#/components/schemas/v1UUID"
          }
        },
        "required": [
          "openstackRouterID",
          "openstackNetworkID",
          "openstackSubnetID",
          "cidr"
        ],
        "type": "object"
      },
      "v1OpenStackProjectId": {
        "description": "OpenStack project ID.",
        "example": "d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 32,
        "minLength": 32,
        "pattern": "^[0-9a-f]{32}$",
        "type": "string"
      },
      "v1Project": {
        "description": "STACKIT project.",
        "properties": {
          "areaId": {
            "$ref": "#/components/schemas/v1AreaID"
          },
          "internetAccess": {
            "example": false,
            "type": "boolean"
          },
          "openstackProjectId": {
            "$ref": "#/components/schemas/v1OpenStackProjectId"
          },
          "projectId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "state": {
            "$ref": "#/components/schemas/v1ResourceState"
          }
        },
        "required": [
          "projectId",
          "areaId",
          "state"
        ],
        "type": "object"
      },
      "v1ProjectList": {
        "description": "List of STACKIT projects.",
        "items": {
          "$ref": "#/components/schemas/v1UUID"
        },
        "type": "array"
      },
      "v1ProjectListResponse": {
        "description": "Project list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1ProjectList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1ProjectMapping": {
        "description": "Mapping from a STACKIT project to an OpenStack project.",
        "properties": {
          "openstackProjectId": {
            "$ref": "#/components/schemas/v1OpenStackProjectId"
          },
          "projectId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "status": {
            "$ref": "#/components/schemas/v1ResourceState"
          }
        },
        "required": [
          "projectId",
          "openstackProjectId",
          "status"
        ],
        "type": "object"
      },
      "v1Readiness": {
        "description": "Readiness probe object.",
        "properties": {
          "cacheReadiness": {
            "example": true,
            "type": "boolean"
          },
          "databaseReadiness": {
            "example": true,
            "type": "boolean"
          },
          "messageQueueReadiness": {
            "example": true,
            "type": "boolean"
          },
          "ready": {
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "ready",
          "databaseReadiness",
          "cacheReadiness",
          "messageQueueReadiness"
        ],
        "type": "object"
      },
      "v1ReqID": {
        "description": "ID representing a single API request.",
        "example": "req-d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^req-[0-9a-f]{32}$",
        "type": "string"
      },
      "v1Request": {
        "description": "Request.",
        "properties": {
          "details": {
            "example": "This worked!",
            "type": "string"
          },
          "requestAction": {
            "$ref": "#/components/schemas/v1ResourceAction"
          },
          "requestId": {
            "$ref": "#/components/schemas/v1ReqID"
          },
          "requestType": {
            "$ref": "#/components/schemas/v1Resource"
          },
          "resources": {
            "example": [
              {
                "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "status": "CREATING",
                "type": "SERVER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/v1RequestResource"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/v1ResourceState"
          }
        },
        "required": [
          "requestId",
          "requestType",
          "requestAction",
          "resources",
          "status"
        ],
        "type": "object"
      },
      "v1RequestResource": {
        "description": "A resource as part of a request.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "status": {
            "$ref": "#/components/schemas/v1ResourceState"
          },
          "type": {
            "$ref": "#/components/schemas/v1Resource"
          }
        },
        "required": [
          "type",
          "id",
          "status"
        ],
        "type": "object"
      },
      "v1RequestResponse": {
        "description": "Request response.",
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/v1ReqID"
          }
        },
        "required": [
          "requestId"
        ],
        "type": "object"
      },
      "v1Resource": {
        "description": "Resource type.",
        "enum": [
          "SERVER",
          "SERVICEACCOUNT",
          "VOLUME",
          "NETWORKAREA",
          "PROJECT",
          "NETWORK",
          "ROUTE"
        ],
        "example": "SERVER",
        "type": "string"
      },
      "v1ResourceAction": {
        "description": "Resource action.",
        "enum": [
          "CREATE",
          "DELETE",
          "UPDATE"
        ],
        "example": "CREATE",
        "type": "string"
      },
      "v1ResourceState": {
        "description": "The state of a resource object.",
        "enum": [
          "CREATING",
          "CREATED",
          "DELETING",
          "DELETED",
          "FAILED",
          "UPDATED",
          "UPDATING"
        ],
        "example": "CREATING",
        "type": "string"
      },
      "v1Route": {
        "description": "Object represents a network route.",
        "properties": {
          "nexthop": {
            "$ref": "#/components/schemas/v1IP"
          },
          "prefix": {
            "$ref": "#/components/schemas/v1CIDR"
          },
          "routeId": {
            "$ref": "#/components/schemas/v1UUID"
          }
        },
        "required": [
          "routeId",
          "prefix",
          "nexthop"
        ],
        "type": "object"
      },
      "v1RouteCreate": {
        "description": "Options for route creation.",
        "properties": {
          "nexthop": {
            "$ref": "#/components/schemas/v1IP"
          },
          "prefix": {
            "$ref": "#/components/schemas/v1CIDR"
          }
        },
        "required": [
          "prefix",
          "nexthop"
        ],
        "type": "object"
      },
      "v1RouteList": {
        "description": "List of routes.",
        "items": {
          "$ref": "#/components/schemas/v1Route"
        },
        "type": "array"
      },
      "v1RouteListResponse": {
        "description": "Route list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1RouteList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1SSHPublicKey": {
        "description": "Public SSH key.",
        "example": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIDsPd27M449akqCtdFg2+AmRVJz6eWio0oMP9dVg7Xe",
        "pattern": "^(ssh-rsa|ssh-ed25519)\\s+[A-Za-z0-9+/]+[=]{0,3}(\\s+.+)?\\s*$",
        "type": "string"
      },
      "v1Server": {
        "description": "Representation of a single server object.",
        "properties": {
          "availabilityZone": {
            "$ref": "#/components/schemas/v1AvailabilityZone"
          },
          "bootFrom": {
            "$ref": "#/components/schemas/v1Volume"
          },
          "flavor": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "launchedAt": {
            "example": "2023-09-22T11:39:48.205Z",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "example": {
              "foo": "foobar"
            },
            "format": "json",
            "type": "object"
          },
          "name": {
            "$ref": "#/components/schemas/v1ServerName"
          },
          "powerState": {
            "$ref": "#/components/schemas/v1ServerPowerState"
          },
          "securityGroups": {
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/v1UUID"
            },
            "type": "array"
          },
          "serverGroups": {
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/v1UUID"
            },
            "type": "array"
          },
          "serverNetworks": {
            "example": [
              {
                "internalIp": "10.0.0.1",
                "networkID": "0507bb7e-9612-40a5-9d5f-bb6aedbce880",
                "publicIp": "192.0.2.1"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/v1ServerNetwork"
            },
            "type": "array"
          },
          "serviceAccountMails": {
            "$ref": "#/components/schemas/v1ServiceAccountMailList"
          },
          "status": {
            "$ref": "#/components/schemas/v1ServerState"
          },
          "uuid": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "volumes": {
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/v1UUID"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "uuid",
          "status",
          "powerState",
          "availabilityZone",
          "serverNetworks",
          "flavor",
          "metadata",
          "volumes",
          "launchedAt",
          "serverGroups",
          "securityGroups"
        ],
        "type": "object"
      },
      "v1ServerGroup": {
        "description": "Definition of a server group.",
        "properties": {
          "members": {
            "description": "The servers that are part of the server group.",
            "example": [
              "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
            ],
            "items": {
              "$ref": "#/components/schemas/v1UUID"
            },
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/v1GenericName"
          },
          "policy": {
            "$ref": "#/components/schemas/v1ServerGroupPolicy"
          },
          "uuid": {
            "$ref": "#/components/schemas/v1UUID"
          }
        },
        "required": [
          "name",
          "uuid",
          "members",
          "policy"
        ],
        "type": "object"
      },
      "v1ServerGroupPolicy": {
        "description": "The server group policy.",
        "enum": [
          "anti-affinity"
        ],
        "example": "anti-affinity",
        "type": "string"
      },
      "v1ServerList": {
        "description": "A list of servers.",
        "items": {
          "$ref": "#/components/schemas/v1Server"
        },
        "type": "array"
      },
      "v1ServerListResponse": {
        "description": "Response object for server list request.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1ServerList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1ServerName": {
        "description": "The name for a Server.",
        "example": "server1",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "v1ServerNetwork": {
        "description": "Describes the object that matches servers to its networks.",
        "example": {
          "internalIp": "10.0.0.1",
          "networkID": "0507bb7e-9612-40a5-9d5f-bb6aedbce880",
          "publicIp": "192.0.2.1"
        },
        "properties": {
          "internalIp": {
            "$ref": "#/components/schemas/v1IP"
          },
          "networkID": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "publicIp": {
            "$ref": "#/components/schemas/v1IP"
          }
        },
        "required": [
          "networkID",
          "internalIp"
        ],
        "type": "object"
      },
      "v1ServerPowerState": {
        "description": "The power state of a server.",
        "enum": [
          "running",
          "stopped",
          "rebooting"
        ],
        "example": "running",
        "type": "string"
      },
      "v1ServerState": {
        "description": "The state of a server object.",
        "enum": [
          "active",
          "deallocated",
          "resizing"
        ],
        "example": "active",
        "type": "string"
      },
      "v1ServiceAccountMail": {
        "description": "Service account mail.",
        "example": "example@compute.sa.stackit.cloud",
        "format": "email",
        "type": "string"
      },
      "v1ServiceAccountMailList": {
        "description": "List of service account mails.",
        "items": {
          "$ref": "#/components/schemas/v1ServiceAccountMail"
        },
        "type": "array"
      },
      "v1ServiceAccountMailListResponse": {
        "description": "Service account mail list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1ServiceAccountMailList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1StaticAreaID": {
        "description": "Static Area ID.",
        "enum": [
          "PUBLIC",
          "SCHWARZ"
        ],
        "example": "PUBLIC",
        "type": "string"
      },
      "v1UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      },
      "v1Volume": {
        "description": "block device volume.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "volumeProperties": {
            "$ref": "#/components/schemas/v1VolumeProperties"
          }
        },
        "type": "object"
      },
      "v1VolumeListResponse": {
        "description": "Volume list response.",
        "properties": {
          "items": {
            "example": [
              {
                "id": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "volumeProperties": {
                  "performanceClass": "storage_premium_perf6",
                  "size": 40
                }
              }
            ],
            "items": {
              "$ref": "#/components/schemas/v1Volume"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1VolumePerformanceClass": {
        "description": "Performance class of a volume.",
        "enum": [
          "storage_premium_perf0",
          "storage_premium_perf1",
          "storage_premium_perf2",
          "storage_premium_perf4",
          "storage_premium_perf6",
          "storage_premium_perf8",
          "storage_premium_perf10",
          "storage_premium_perf12"
        ],
        "example": "storage_premium_perf6",
        "type": "string"
      },
      "v1VolumeProperties": {
        "description": "Properties of a volume.",
        "properties": {
          "performanceClass": {
            "$ref": "#/components/schemas/v1VolumePerformanceClass"
          },
          "size": {
            "example": 40,
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-iaas@mail.schwarz",
      "name": "STACKIT IaaS Teams",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "This API allows you to create and modify IaaS resources.",
    "license": {
      "name": "KMZ",
      "url": "https://ab.fahrt"
    },
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "IaaS-API",
    "version": "1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1alpha1/healthz": {
      "get": {
        "description": "Get Information about the health of the API.",
        "operationId": "Probes_GetHealth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "status": "available"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Health"
                }
              }
            },
            "description": "A successful health response."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Health.",
        "tags": [
          "Probes"
        ],
        "x-stackit-authentication": {
          "disabled": true
        },
        "x-stackit-authorization": {
          "disabled": true
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        }
      }
    },
    "/v1alpha1/openstack-projects/{openStackProjectId}": {
      "get": {
        "description": "Get STACKIT project ID from a OpenStack project ID.",
        "operationId": "v1GetProjectIDByOSID",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OpenStackProjectId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "projectId": "0582aba2-5977-4cb6-9ec7-616eb39c3f0d"
                },
                "schema": {
                  "properties": {
                    "projectId": {
                      "$ref": "#/components/schemas/v1UUID"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Show STACKIT project ID."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get STACKIT project ID.",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.iaas-project.get"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.iaas-project.get"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas": {
      "get": {
        "description": "Get a list of all visible network areas defined in an organization.",
        "operationId": "v1ListAreas",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkAreaListResponse"
                }
              }
            },
            "description": "Get a list of network areas."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network areas in an organization.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area.list"
          ]
        }
      },
      "post": {
        "description": "Create a new network area in an organization.",
        "operationId": "v1CreateArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "defaultNameservers": [
                  "10.1.2.10"
                ],
                "defaultPrefixLen": 24,
                "maxPrefixLen": 28,
                "minPrefixLen": 22,
                "name": "My STACKIT Internet Network Area",
                "networkRanges": [
                  "10.0.0.0/16"
                ],
                "routes": [
                  {
                    "nexthop": "10.1.2.10",
                    "prefix": "192.168.0.0/24"
                  }
                ],
                "transferNetwork": "10.1.2.0/24"
              },
              "schema": {
                "properties": {
                  "defaultNameservers": {
                    "items": {
                      "$ref": "#/components/schemas/v1IP"
                    },
                    "maxItems": 3,
                    "type": "array"
                  },
                  "defaultPrefixLen": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/v1AreaDefaultPrefixLength"
                      }
                    ],
                    "default": 25
                  },
                  "maxPrefixLen": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/v1AreaMaxPrefixLength"
                      }
                    ],
                    "default": 29
                  },
                  "minPrefixLen": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/v1AreaMinPrefixLength"
                      }
                    ],
                    "default": 24
                  },
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "networkRanges": {
                    "items": {
                      "$ref": "#/components/schemas/v1CIDR"
                    },
                    "minItems": 1,
                    "type": "array"
                  },
                  "routes": {
                    "items": {
                      "$ref": "#/components/schemas/v1RouteCreate"
                    },
                    "type": "array"
                  },
                  "transferNetwork": {
                    "$ref": "#/components/schemas/v1CIDR"
                  }
                },
                "required": [
                  "name",
                  "transferNetwork",
                  "networkRanges"
                ],
                "type": "object"
              }
            }
          },
          "description": "Area creation request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkArea"
                }
              }
            },
            "description": "Area has been created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network area in an organization.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area.create"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}": {
      "delete": {
        "description": "Delete an existing network area in an organization. This is only possible if no projects are using the area anymore.",
        "operationId": "v1DeleteArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for area accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Areas must no longer be referenced by any project to be deleted"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Tried to delete an area that was still in use by a project."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a network area in an organization.",
        "operationId": "v1GetArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkArea"
                }
              }
            },
            "description": "Show network area details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area.get"
          ]
        }
      },
      "put": {
        "description": "Update the settings of a network area in an organization.",
        "operationId": "v1UpdateArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "defaultNameservers": [
                  "10.1.2.10"
                ],
                "defaultPrefixLen": 24,
                "maxPrefixLen": 26,
                "minPrefixLen": 22,
                "name": "My STACKIT Internet Network Area"
              },
              "schema": {
                "properties": {
                  "defaultNameservers": {
                    "items": {
                      "$ref": "#/components/schemas/v1IP"
                    },
                    "maxItems": 3,
                    "type": "array"
                  },
                  "defaultPrefixLen": {
                    "$ref": "#/components/schemas/v1AreaDefaultPrefixLength"
                  },
                  "maxPrefixLen": {
                    "$ref": "#/components/schemas/v1AreaMaxPrefixLength"
                  },
                  "minPrefixLen": {
                    "$ref": "#/components/schemas/v1AreaMinPrefixLength"
                  },
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Area update request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkArea"
                }
              }
            },
            "description": "Area has been updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network area settings.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area.update"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area.update"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges": {
      "get": {
        "description": "Get a list of all network ranges in a network area.",
        "operationId": "v1ListNetworkRangesOfArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkRangeListResponse"
                }
              }
            },
            "description": "List network ranges."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network ranges in a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-range.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-range.list"
          ]
        }
      },
      "post": {
        "description": "Create a new network range in an existing network area.",
        "operationId": "v1AddNetworkRangesToArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "networkRanges": [
                  {
                    "networkRangeId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                    "prefix": "10.1.2.0/24"
                  }
                ]
              },
              "schema": {
                "properties": {
                  "networkRanges": {
                    "$ref": "#/components/schemas/v1NetworkRangeList"
                  }
                },
                "required": [
                  "networkRanges"
                ],
                "type": "object"
              }
            }
          },
          "description": "Add network ranges to an area request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkRangeListResponse"
                }
              }
            },
            "description": "Adding network ranges was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Network ranges must not overlap with other network ranges or transfer networks"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Tried to add a network range that conflicts with an existing network range or transfer range."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network range in a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-range.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-range.create"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/network-ranges/{networkRangeId}": {
      "delete": {
        "description": "Delete a network range of a network area.",
        "operationId": "v1DeleteNetworkRangeFromArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network range accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Network ranges must no longer be used to be deleted"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Tried to delete a network range that is still in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network range.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-range.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-range.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a network range in a network area.",
        "operationId": "v1GetNetworkRangeOfArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkRangeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkRange"
                }
              }
            },
            "description": "Show network range details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network range.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-range.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-range.get"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/projects": {
      "get": {
        "description": "Get a list of all projects using a network area.",
        "operationId": "v1GetProjectsUsingArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ProjectListResponse"
                }
              }
            },
            "description": "List projects for a network area."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all projects using a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-project.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-project.list"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes": {
      "get": {
        "description": "Get a list of all network routes defined in a network area.",
        "operationId": "v1ListRoutesOfArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RouteListResponse"
                }
              }
            },
            "description": "List network routes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all network routes in a network area.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-route.list"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-route.list"
          ]
        }
      },
      "post": {
        "description": "Create one or several new network routes in a network area.",
        "operationId": "v1AddRoutesToArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "routes": [
                  {
                    "nexthop": "10.1.2.10",
                    "prefix": "192.168.0.0/24"
                  }
                ]
              },
              "schema": {
                "properties": {
                  "routes": {
                    "items": {
                      "$ref": "#/components/schemas/v1RouteCreate"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "routes"
                ],
                "type": "object"
              }
            }
          },
          "description": "Add routes to an area request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RouteListResponse"
                }
              }
            },
            "description": "Create request for network routes accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "routes must not overlap with other network ranges or transfer networks"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Tried to add a route that conflicts with an existing network range or transfer range."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network routes.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-route.create"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-route.create"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/network-areas/{areaId}/routes/{routeId}": {
      "delete": {
        "description": "Delete a network route of a network area.",
        "operationId": "v1DeleteRouteFromArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network route accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a network route.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-route.delete"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-route.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a network route defined in a network area.",
        "operationId": "v1GetRouteOfArea",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkAreaID"
          },
          {
            "$ref": "#/components/parameters/v1RouteID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Route"
                }
              }
            },
            "description": "Show route details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a network route.",
        "tags": [
          "Area"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.network-area-route.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.network-area-route.get"
          ]
        }
      }
    },
    "/v1alpha1/organizations/{organizationId}/requests/{requestId}": {
      "get": {
        "description": "Lookup an organization request ID from a previous request. This allows to find resource IDs of resources generated during a organization request.",
        "operationId": "v1OrganizationGetRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1OrganizationID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Request"
                }
              }
            },
            "description": "Show organization request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup an organization request ID.",
        "tags": [
          "Request"
        ],
        "x-stackit-authorization": {
          "actions": [
            "organization.iaas-request.get"
          ],
          "resource-id": "organizationId",
          "resource-id-type": "dynamic",
          "resource-type": "organization"
        },
        "x-viewer-permissions": {
          "actions": [
            "organization.iaas-request.get"
          ]
        }
      }
    },
    "/v1alpha1/projects": {
      "post": {
        "deprecated": true,
        "description": "Create a STACKIT project.",
        "operationId": "v1CreateProjectDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1DryRun"
          }
        ],
        "requestBody": {
          "$ref": "#/paths/~1v1alpha1~1projects/put/requestBody"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful create response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful response to a dryrun."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create project.",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.iaas-project.update"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.iaas-project.update"
          ]
        }
      },
      "put": {
        "description": "Create a STACKIT project.",
        "operationId": "v1CreateProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1DryRun"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "labels": {
                  "networkArea": "ede29f66-3cd8-4026-b1ec-1586d6e57af6",
                  "scope": "PUBLIC"
                },
                "organizationId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                "projectId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "properties": {
                  "labels": {
                    "properties": {
                      "networkArea": {
                        "$ref": "#/components/schemas/v1UUID"
                      },
                      "scope": {
                        "example": "PUBLIC",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "organizationId": {
                    "$ref": "#/components/schemas/v1UUID"
                  },
                  "projectId": {
                    "$ref": "#/components/schemas/v1UUID"
                  }
                },
                "required": [
                  "projectId",
                  "labels"
                ],
                "type": "object"
              }
            }
          },
          "description": "Project creation request.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful create response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful response to a dryrun."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create project.",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.iaas-project.update"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.iaas-project.update"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}": {
      "get": {
        "description": "Get details about a STACKIT project.",
        "operationId": "v1GetProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "Show project details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project details.",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.iaas-project.get",
            "system.iaas-project.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.iaas-project.get",
            "system.iaas-project.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/keypairs": {
      "get": {
        "description": "Get a list of all key pairs in a project.",
        "operationId": "v1ListKeyPairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1KeyPairListResponse"
                }
              }
            },
            "description": "List key pairs."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all key pairs in a project.",
        "tags": [
          "Keypairs"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.compute-keypair.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.compute-keypair.list"
          ]
        }
      },
      "post": {
        "description": "Create a new key pair in a project based on provided public key material.",
        "operationId": "v1CreateKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1KeyPair"
              }
            }
          },
          "description": "Create a Key pair request.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1KeyPair"
                }
              }
            },
            "description": "Key pair creation was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "A key pair with the provided name already exists. Please choose a unique key pair Name within your Project."
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Key pair already exists."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create a key pair.",
        "tags": [
          "Keypairs"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.compute-keypair.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.compute-keypair.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/keypairs/{keypairName}": {
      "delete": {
        "description": "Delete a key pair from a project.",
        "operationId": "v1DeleteKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1KeypairName"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for key pair accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a keypair.",
        "tags": [
          "Keypairs"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.compute-keypair.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.compute-keypair.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a key pair.",
        "operationId": "v1GetKeyPair",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1KeypairName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1KeyPair"
                }
              }
            },
            "description": "Show key pair details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get key pair details.",
        "tags": [
          "Keypairs"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.compute-keypair.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.compute-keypair.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/mapping": {
      "get": {
        "deprecated": true,
        "description": "Get the project mapping (STACKIT Project ID <-> OpenStack Project ID) for any project. This endpoint is only temporary and will be removed.",
        "operationId": "v1GetProjectMapping",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ProjectMapping"
                }
              }
            },
            "description": "Show project mapping."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project mapping.",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.iaas-project.get"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.iaas-project.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks": {
      "get": {
        "description": "Get a list of all networks inside a project.",
        "operationId": "v1ListNetworksInProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkListResponse"
                }
              }
            },
            "description": "List all networks of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all networks inside a project.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.list"
          ]
        }
      },
      "post": {
        "description": "Create a new network in a project. `nameservers` will be filled from `defaultNameservers` of the respective area if not specified. If the project has `internetAccess` enabled and this is the first network in the project this might incur cost.",
        "operationId": "v1CreateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Network",
                "nameservers": [
                  "10.1.2.10"
                ],
                "prefixLengthV4": 24
              },
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "nameservers": {
                    "$ref": "#/components/schemas/v1Nameserver"
                  },
                  "prefixLengthV4": {
                    "default": 25,
                    "example": 24,
                    "maximum": 29,
                    "minimum": 22,
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Create network request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RequestResponse"
                }
              }
            },
            "description": "Create request for network accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not allocate prefixes for network. Ensure the area has sufficient space in the configured network ranges"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Can not allocate prefixes for network."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}": {
      "delete": {
        "description": "Delete a network.",
        "operationId": "v1DeleteNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request for network accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not delete network. It is still has systems connected to it."
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Can not delete network that is still in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete network.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a network.",
        "operationId": "v1GetNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Network"
                }
              }
            },
            "description": "Show network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get network details.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.get"
          ]
        }
      },
      "put": {
        "description": "Update the settings of a network.",
        "operationId": "v1UpdateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Network",
                "nameservers": [
                  "10.1.2.10"
                ]
              },
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "nameservers": {
                    "$ref": "#/components/schemas/v1Nameserver"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update network request.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Update accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network settings.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.update"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/openstack-networks/{networkId}": {
      "get": {
        "deprecated": true,
        "description": "Get OpenStack details about a network.",
        "operationId": "v1GetOpenStackNetworkDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1OpenStackNetwork"
                }
              }
            },
            "description": "Show OpenStack network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get OpenStack network details.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/requests/{requestId}": {
      "get": {
        "description": "Lookup a project request ID from a previous request. This allows to find resource IDs of resources generated during a projects request.",
        "operationId": "v1ProjectGetRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1RequestID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Request"
                }
              }
            },
            "description": "Show project request details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Lookup a project request ID.",
        "tags": [
          "Request"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.iaas-request.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.iaas-request.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/server-groups": {
      "get": {
        "description": "Get the server groups created in a project.",
        "operationId": "v1ListServerGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": [
                  {
                    "members": [
                      "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                    ],
                    "name": "MyServerGroup",
                    "policy": "anti-affinity",
                    "uuid": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/v1ServerGroup"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List server groups."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Server group is not empty"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Server Group not empty."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the server groups setup for a project.",
        "tags": [
          "Server Groups"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server-group.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server-group.list"
          ]
        }
      },
      "post": {
        "description": "Create a new server server group in the given project ID.",
        "operationId": "v1CreateServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "MyServerGroup",
                "policy": "anti-affinity"
              },
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "policy": {
                    "$ref": "#/components/schemas/v1ServerGroupPolicy"
                  }
                },
                "required": [
                  "name",
                  "policy"
                ],
                "type": "object"
              }
            }
          },
          "description": "Create server group request.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServerGroup"
                }
              }
            },
            "description": "Server group was created successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create a new server group in a project.",
        "tags": [
          "Server Groups"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server-group.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server-group.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/server-groups/{serverGroupId}": {
      "delete": {
        "description": "Delete a server group in the given project.",
        "operationId": "v1DeleteServerGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "A server deletion job was created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a server group in a project.",
        "tags": [
          "Server Groups"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server-group.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server-group.delete"
          ]
        }
      },
      "get": {
        "description": "Get the server group created in a project.",
        "operationId": "v1GetServerGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerGroupID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServerGroup"
                }
              }
            },
            "description": "Show server group details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get the server group.",
        "tags": [
          "Server Groups"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server-group.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server-group.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers": {
      "get": {
        "description": "Get a list of all servers inside a project.",
        "operationId": "v1ListServersInProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServerListResponse"
                }
              }
            },
            "description": "List all servers of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all servers inside a project.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.list"
          ]
        }
      },
      "post": {
        "description": "Create a new server in a project.",
        "operationId": "v1CreateServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "bootDevice": {
                  "sourceId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
                  "sourceType": "volume"
                },
                "flavor": "3",
                "name": "MyNewServer",
                "network": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "properties": {
                  "availabilityZone": {
                    "$ref": "#/components/schemas/v1AvailabilityZone"
                  },
                  "bootDevice": {
                    "$ref": "#/components/schemas/v1BootDevice"
                  },
                  "flavor": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "keypairName": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "name": {
                    "$ref": "#/components/schemas/v1ServerName"
                  },
                  "network": {
                    "$ref": "#/components/schemas/v1UUID"
                  },
                  "securityGroups": {
                    "items": {
                      "$ref": "#/components/schemas/v1UUID"
                    },
                    "type": "array"
                  },
                  "serverGroup": {
                    "$ref": "#/components/schemas/v1UUID"
                  },
                  "serviceAccountMails": {
                    "$ref": "#/components/schemas/v1ServiceAccountMailList"
                  },
                  "volumes": {
                    "description": "List of volumes to be attached to the server, excluding the boot volume.",
                    "items": {
                      "$ref": "#/components/schemas/v1UUID"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "flavor",
                  "network",
                  "bootDevice"
                ],
                "type": "object"
              }
            }
          },
          "description": "Create server request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RequestResponse"
                }
              }
            },
            "description": "Create request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}": {
      "delete": {
        "description": "Delete a server. Volumes won't be deleted.",
        "operationId": "v1DeleteServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "requestId": "req-d61a8564c8dd4ffbbc15143e7d0c85ed"
                },
                "schema": {
                  "properties": {
                    "requestId": {
                      "$ref": "#/components/schemas/v1ReqID"
                    }
                  },
                  "required": [
                    "requestId"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Delete request for server accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a server.",
        "operationId": "v1GetServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Show server details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server details.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/console": {
      "get": {
        "description": "Get a URL for server console.",
        "operationId": "v1GetServerConsole",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "url": "https://foo.bar"
                },
                "schema": {
                  "properties": {
                    "url": {
                      "example": "https://foo.bar",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Show server console URL."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get server console.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.console.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.console.get"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/deallocate": {
      "post": {
        "description": "Deallocate an existing server. The server will be removed from the hypervisor so only the volume will be billed.",
        "operationId": "v1DeallocateServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "Server deallocation request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Deallocate an existing server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.deallocate"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.deallocate"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/metadata": {
      "put": {
        "description": "Update the metadata of a server in the metadata server. To delete the existing metadata, update with an empty request body.",
        "operationId": "v1UpdateServerMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServerID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "foo": "Foo Value"
              },
              "schema": {
                "properties": {
                  "metadata": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update server metadata request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Metadata update was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update metadata of a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.metadata.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.metadata.update"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/networks/{networkId}": {
      "delete": {
        "description": "Detach a network from a server. If an internal IP is provided in the request body, only the internal IP and any public IP associated with it will be dissociated.",
        "operationId": "v1DetachServerNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "internalIp": "10.1.2.10"
              },
              "schema": {
                "properties": {
                  "internalIp": {
                    "$ref": "#/components/schemas/v1IP"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Detach network from a server request."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Network detach request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a network from a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.network.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.network.remove"
          ]
        }
      },
      "put": {
        "description": "Attach a network to a server. If an internal IP is provided in the body, it will be used else one will be assigned using DHCP.",
        "operationId": "v1AttachServerNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1NetworkID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "internalIp": "10.1.2.10"
              },
              "schema": {
                "properties": {
                  "internalIp": {
                    "$ref": "#/components/schemas/v1IP"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Attach network to server request."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Network attachment was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "IP is not available"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Internal IP is not available."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach a network to a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.network.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.network.add"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/public-ips": {
      "delete": {
        "description": "Dissociate a public IP on an existing server.",
        "operationId": "v1DetachPublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "publicIp": "10.1.2.10"
              },
              "schema": {
                "properties": {
                  "publicIp": {
                    "$ref": "#/components/schemas/v1IP"
                  }
                },
                "required": [
                  "publicIp"
                ],
                "type": "object"
              }
            }
          },
          "description": "Detach public IP from a server request."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Public IP detach request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/ServerOrPublicIPNotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Public IP must be attached to the provided server"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Tried to detach a public IP that was not attached to the server."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Dissociate a public IP from a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.public-ip.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.public-ip.remove"
          ]
        }
      },
      "put": {
        "description": "Associate a public IP to a server.",
        "operationId": "v1AttachPublicIP",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "publicIp": "10.1.2.10"
              },
              "schema": {
                "properties": {
                  "publicIp": {
                    "$ref": "#/components/schemas/v1IP"
                  }
                },
                "required": [
                  "publicIp"
                ],
                "type": "object"
              }
            }
          },
          "description": "Attach public IP to server request."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Associate a public IP to the server was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Public IP is not available"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Public IP already in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Associate a public IP to the server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.public-ip.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.public-ip.add"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/reboot": {
      "post": {
        "description": "Reboot the server. A soft reboot will attempt to gracefully shut down the server by passing the command to the operating system. A hard reboot will power cycle the server without waiting for the operating system to shutdown properly.",
        "operationId": "v1RebootServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "description": "Defines if it is a soft or a hard reboot.",
            "example": "soft",
            "in": "query",
            "name": "action",
            "schema": {
              "default": "soft",
              "enum": [
                "soft",
                "hard"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Server reboot request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reboot the server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.reboot"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.reboot"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/rescue": {
      "post": {
        "description": "Rescue an existing server. It is shutdown and the initial image is attached as the boot volume, while the boot volume is attached as secondary volume and the server is booted.",
        "operationId": "v1RescueServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "image": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "properties": {
                  "image": {
                    "$ref": "#/components/schemas/v1UUID"
                  }
                },
                "required": [
                  "image"
                ],
                "type": "object"
              }
            }
          },
          "description": "Rescue server request.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Server rescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Rescue an existing server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.rescue"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.rescue"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/resize": {
      "post": {
        "description": "Resize the server to the given flavor.",
        "operationId": "v1ResizeServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "flavorId": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
              },
              "schema": {
                "properties": {
                  "flavorId": {
                    "$ref": "#/components/schemas/v1UUID"
                  }
                },
                "required": [
                  "flavorId"
                ],
                "type": "object"
              }
            }
          },
          "description": "Resize a server request.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Server resize was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Server already has the flavor"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Server already has the flavor."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Resize a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.resize"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.resize"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/security-groups/{securityGroupId}": {
      "delete": {
        "description": "Remove a server from a attached security group.",
        "operationId": "v1RemoveServerSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "202": {
            "description": "Server has been removed from the security group."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Server must have the security group associated with it to remove it"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "The server is not in the security group."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Remove a server from a security group.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.security-group.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.security-group.remove"
          ]
        }
      },
      "put": {
        "description": "Add an existing server to an existing security group.",
        "operationId": "v1AddServerSecurityGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1SecurityGroupID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Adding server to security group was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Security group already associated with the server"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Security group already associated with the server."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a server to a security group.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.security-group.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.security-group.add"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts": {
      "get": {
        "description": "Get the list of the service accounts of the server.",
        "operationId": "v1ServerGetServiceAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServiceAccountMailListResponse"
                }
              }
            },
            "description": "List service accounts."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all service accounts of the Server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.service-account.list"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/service-accounts/{serviceAccountMail}": {
      "delete": {
        "description": "Detach an additional service account from the server.",
        "operationId": "v1ServerDetachServiceAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServiceAccountMail"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account detached from the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "service account not attached"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Service account not attached to server."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a service account from a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.service-account.remove"
          ]
        }
      },
      "put": {
        "description": "Attach an additional service account to the server.",
        "operationId": "v1ServerAttachServiceAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1ServiceAccountMail"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ServiceAccountMailListResponse"
                }
              }
            },
            "description": "Service account attached to the server."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "service account already attached"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Service account already attached to server."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach service account to a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.service-account.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.service-account.add"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/start": {
      "post": {
        "description": "Start an existing server or allocates the server if deallocated.",
        "operationId": "v1StartServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Server start request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Boot up a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.start"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.start"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/stop": {
      "post": {
        "description": "Stops an existing server. The server will remain on the Hypervisor and will be charged full price for all resources attached to it. The attached resources will remain reserved. Useful particularly for vGPU servers.",
        "operationId": "v1StopServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "Server stop request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Stop an existing server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.stop"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.stop"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/unrescue": {
      "post": {
        "description": "Unrescue an existing server. The original boot volume is attached as boot volume of the server and the server is booted up.",
        "operationId": "v1UnrescueServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "description": "Server unrescue request accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/InvalidServerAction"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Unrescue an existing server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.unrescue"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.unrescue"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/servers/{serverId}/volumes/{volumeId}": {
      "delete": {
        "description": "Detach an existing volume from an existing server.",
        "operationId": "v1DetachVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Volume detachment job was created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Volume is not in correct state"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "The volume has to be attached to the server to remove it."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Detach a volume from a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.remove"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.volume.remove"
          ]
        }
      },
      "put": {
        "description": "Attach an existing volume to an existing server.",
        "operationId": "v1AttachVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ServerID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Server"
                }
              }
            },
            "description": "Volume attachment was successful."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Volume is not in correct state"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Volume not available and detached."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Attach a volume to a server.",
        "tags": [
          "Servers"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.server.volume.add"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.server.volume.add"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/volumes": {
      "get": {
        "description": "Get a list of all volumes inside a project.",
        "operationId": "v1ListVolumesInProject",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1VolumeListResponse"
                }
              }
            },
            "description": "List project volumes."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all volumes inside a project.",
        "tags": [
          "Volumes"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.volume.list"
          ]
        }
      },
      "post": {
        "description": "Create a new volume in a project. If a volume source is not provided, an empty volume will be created.",
        "operationId": "v1CreateVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "availabilityZone": "eu01-1",
                "bootable": true,
                "description": "My nice volume.",
                "encrypted": false,
                "multiAttach": false,
                "name": "MyNewVolume",
                "performanceClass": "storage_premium_perf6",
                "properties": {
                  "storageType": "blockDevice",
                  "testVolume": "yes"
                },
                "size": 20,
                "volumeSource": {
                  "sourceName": "snapshot",
                  "uuid": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed"
                }
              },
              "schema": {
                "properties": {
                  "availabilityZone": {
                    "$ref": "#/components/schemas/v1AvailabilityZone"
                  },
                  "bootable": {
                    "default": false,
                    "example": true,
                    "type": "boolean"
                  },
                  "description": {
                    "$ref": "#/components/schemas/v1Description"
                  },
                  "encrypted": {
                    "default": false,
                    "example": false,
                    "type": "boolean"
                  },
                  "multiAttach": {
                    "default": false,
                    "example": false,
                    "type": "boolean"
                  },
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "performanceClass": {
                    "$ref": "#/components/schemas/v1VolumePerformanceClass"
                  },
                  "properties": {
                    "example": {
                      "storageType": "blockDevice",
                      "testVolume": "yes"
                    },
                    "format": "json",
                    "type": "object"
                  },
                  "size": {
                    "example": 20,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "volumeSource": {
                    "properties": {
                      "sourceName": {
                        "enum": [
                          "image",
                          "snapshot",
                          "volume"
                        ],
                        "example": "snapshot",
                        "type": "string"
                      },
                      "uuid": {
                        "$ref": "#/components/schemas/v1UUID"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "name",
                  "size"
                ],
                "type": "object"
              }
            }
          },
          "description": "Create a volume request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "example": {
                  "requestId": "req-d61a8564c8dd4ffbbc15143e7d0c85ed"
                },
                "schema": {
                  "properties": {
                    "requestId": {
                      "$ref": "#/components/schemas/v1ReqID"
                    }
                  },
                  "required": [
                    "requestId"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Create request for volume accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new volume.",
        "tags": [
          "Volumes"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.volume.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/volumes/{volumeId}": {
      "delete": {
        "description": "Delete a volume that is part of the project.",
        "operationId": "v1DeleteVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1VolumeID"
          },
          {
            "$ref": "#/components/parameters/v1ProjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "Volume has been deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "volume should be available and detached"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Volume not available and/or detached."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a volume.",
        "tags": [
          "Volumes"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.volume.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a block device volume.",
        "operationId": "v1GetVolume",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ProjectID"
          },
          {
            "$ref": "#/components/parameters/v1VolumeID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Volume"
                }
              }
            },
            "description": "Show volume details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get details about a volume.",
        "tags": [
          "Volumes"
        ],
        "x-stackit-authorization": {
          "actions": [
            "iaas.volume.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        },
        "x-viewer-permissions": {
          "actions": [
            "iaas.volume.get"
          ]
        }
      }
    },
    "/v1alpha1/readyz": {
      "get": {
        "description": "Get Information about the readiness of the API.",
        "operationId": "Probes_GetReadiness",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "cacheReadiness": true,
                  "databaseReadiness": true,
                  "messageQueueReadiness": true,
                  "ready": true
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Readiness"
                }
              }
            },
            "description": "Everything is ready."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "cacheReadiness": true,
                  "databaseReadiness": false,
                  "messageQueueReadiness": true,
                  "ready": false
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Readiness"
                }
              }
            },
            "description": "Something is not ready."
          }
        },
        "summary": "Get Readiness.",
        "tags": [
          "Probes"
        ],
        "x-stackit-authentication": {
          "disabled": true
        },
        "x-stackit-authorization": {
          "disabled": true
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        }
      }
    }
  },
  "servers": [
    {
      "description": "This API allows you to create and modify IaaS resources.",
      "url": "https://iaas.api.eu01.stackit.cloud"
    }
  ],
  "tags": [
    {
      "description": "Generic Tag for Network Area based Service.",
      "name": "Area"
    },
    {
      "description": "Generic Tag for Key pair based Service.",
      "name": "Keypairs"
    },
    {
      "description": "Generic Tag for Network based Service.",
      "name": "Network"
    },
    {
      "description": "Generic Tag for Probes (healthz/readyz).",
      "name": "Probes"
    },
    {
      "description": "Generic Tag for Project based Service.",
      "name": "Project"
    },
    {
      "description": "Generic Tag for Request based Service.",
      "name": "Request"
    },
    {
      "description": "Generic Tag for Server based Service.",
      "name": "Servers"
    },
    {
      "description": "Generic Tag for Server Groups.",
      "name": "Server Groups"
    },
    {
      "description": "Generic Tag for Volume based Service.",
      "name": "Volumes"
    }
  ],
  "x-stackit-api": {
    "type": "stackit"
  },
  "x-stackit-scope": {
    "visibility": "private"
  },
  "x-stackit-signer": {
    "audience": [
      "iaas"
    ],
    "inject-email": false
  }
}